name: 'Terraform'

on:
  #push:
  #  branches:
  #  - main
  pull_request:
    branches:
      - main
    types: [closed]

env:
  TF_VAR_cloudflare_api_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
  TF_VAR_account_id: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"

jobs:
  terraform:
    if: github.event.pull_request.merged == true
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      # $(seq -f '-replace=cloudflare_teams_list.domain_lists["%.0f"]' 0 9) -replace="cloudflare_teams_rule.block_ads"
      continue-on-error: true
        
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # Terraform Apply
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false
      # $(seq -f '-replace=cloudflare_teams_list.domain_lists["%.0f"]' 0 9) -replace="cloudflare_teams_rule.block_ads"
    
